version: '3.8'

services:

  app:
    image: youtube_downloader
    build:
      context: .
      args:
        - VERSION=1.0.0
    environment:
      - DJANGO_SECRET_KEY=WOOOOOOOOWOOOOOOOOWWW
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    ports:
      - "9000:9000"
    volumes:
      - .:/code
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/"]
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully


  collect_static:
    build:
      context: .
    command:
      - /bin/sh
      - -c
      - |
        mkdir -p /code/app/build/static
        python manage.py collectstatic --noinput
    volumes:
      - .:/code
    working_dir: /code
    environment:
      - DJANGO_SECRET_KEY=WOOOOOOOOWOOOOOOOOWWW
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    depends_on:
      frontend-builder:
        condition: service_completed_successfully


  frontend-builder:
    image: node:19.4.0
    command:
      - /bin/sh
      - -c
      - |
        npm install
        npm run build
    working_dir: /app
    volumes:
      - ./app:/app


    # Celery Service
  celery:
    build:
      context: .
    command:
      - /bin/sh
      - -c
      - |
        /opt/venv/bin/celery -A youtube_downloader worker -l INFO
    volumes:
      - .:/code
    working_dir: /code
    environment:
      - DJANGO_SECRET_KEY=WOOOOOOOOWOOOOOOOOWWW
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    depends_on:
      redis:
        condition: service_healthy
      # app:
      #   condition: service_healthy


  db_init:
    build:
      context: .
    command:
      - /bin/sh
      - -c
      - |
        python manage.py makemigrations app
        python manage.py migrate
        python manage.py createsuperuser --noinput || true
    working_dir: /code
    environment:
      - DJANGO_SECRET_KEY=WOOOOOOOOWOOOOOOOOWWW
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_PASSWORD=password
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
    depends_on:
      db:
        condition: service_healthy



  db:
    image: postgres:16.2-alpine3.19
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5



    # Redis Service
  redis:
    image: redis:alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

